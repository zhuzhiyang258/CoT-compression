

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is common to ignore the package manager's dependency cache (like .pyc)
#  and Python-specific files.
.idea/

# UV specific
.python-version
uv.lock

# Project specific
*.csv
*.log
results*/
test_*
vllm-env/
.vscode/

# Temporary files
*.tmp
*.temp
*~
._____temp/

# OS specific
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# User specific
instraction
models/
CLAUDE.md

# Model and training related files
# Pretrained models
models/
*.safetensors
*.bin
*.pt
*.pth
*.ckpt
*.h5

# Model configuration files that are large
model.safetensors.index.json

# Training outputs - NEW UNIFIED STRUCTURE
sft/outputs/
# Legacy output directories (to be cleaned up)
sft/output/
sft/test_output/
sft/financial_output/
sft/merged_model/
sft/quick_merged_model/
sft/full_merged_model/
sft/financial_merged_model/
# Generic patterns
*/checkpoints/
*/checkpoint-*/
*/lora_adapters/
*_merged/
*_merged_model/

# HuggingFace cache
.cache/
~/.cache/huggingface/
.huggingface/

# Weights and Biases
wandb/

# TensorBoard logs
runs/
logs/
tensorboard/

# Training artifacts
*.safetensors
adapter_*.json
adapter_model.*
trainer_state.json
training_args.bin
optimizer.pt
scheduler.pt
rng_state.pth
pytorch_model.bin

# Large tokenizer files (only in model directories)
models/*/tokenizer.json
models/*/vocab.json
models/*/merges.txt
sft/*/tokenizer.json
sft/*/vocab.json
sft/*/merges.txt

# Chat templates and other large model files
models/*/chat_template.jinja
sft/*/chat_template.jinja
*.jinja
*.jinja2

# Model index files
model.safetensors.index.json
pytorch_model.bin.index.json

# Model evaluation results
results_*/
eval_results/
predictions/

# VLLM cache and logs
vllm.log
*.vllm_cache

# GPU profiling
*.nvprof
*.prof

# Additional large files
# Any file over typical size limits
*.pickle
*.pkl
*.npy
*.npz

# Backup model files
*.bak
*_backup/
backup_*/

# Downloaded model caches
.cache/transformers/
.cache/torch/
downloads/